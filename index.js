require('dotenv').config();

const TelegramApi = require('node-telegram-bot-api');
const {gameOptions, againOptions} = require('./options');
const sequelize = require('./db');
const UserModel = require('./models');

const TOKEN = process.env.TELEGRAM_TOKEN || 'YOUR_TELEGRAM_BOT_TOKEN';

const bot = new TelegramApi(TOKEN, { polling: true });

const chats = {};

const startGame = async (chatId) => {
    await bot.sendMessage(chatId, '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–µ —É–≥–∞–¥–∞—Ç—å.');

    chats[chatId] = Math.floor(Math.random() * 10);
    await bot.sendMessage(chatId, '–£–≥–∞–¥—ã–≤–∞–π... üòÅ', gameOptions);
}

const start = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync();
    } catch (err) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–ª–æ–º–∞–ª–æ—Å—å', err)
    }

    await bot.setMyCommands([
        { command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.' },
        { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.' },
        { command: '/game', description: '–ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".' },
    ]);

    bot.on('message', async ({ chat: { id }, text, from: { first_name } }) => {
        try {
            switch (text) {
                case '/start': {
                    await UserModel.create({ chatId: id });
                    await bot.sendSticker(id, 'https://tlgrm.ru/_/stickers/633/5c5/6335c5a3-81a4-3786-bb3c-701aa8335d38/2.webp')
                    await bot.sendMessage(id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç (–∞–≤—Ç. r0mm4k).');
                    break;
                }
                case '/info': {
                    const { right, wrong } = await UserModel.findOne({ chatId: id });
                    await bot.sendMessage(id, `–¢–µ–±—è –∑–æ–≤—É—Ç ${first_name}. –¢–≤–æ–π —Å—á–µ—Ç: ${right} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ ${wrong} - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö.`);
                    break;
                }
                case '/game': {
                    await startGame(id);
                    break;
                }
                default: {
                    await bot.sendMessage(id, `–£–ø—Å!!! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...`);
                    break;
                }
            }
        } catch (err) {
            await bot.sendMessage(id, `–£–ø—Å!!! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...`);
        }
    });

    bot.on('callback_query', async ({ message: { chat: { id } }, data }) => {
        const user = await UserModel.findOne({ chatId: id });

        switch (data) {
            case String(chats[id]): {
                user.right += 1;
                await bot.sendMessage(id, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!!! –¢—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É - ${data}.`, againOptions);
                break;
            }
            case '/again': {
                await startGame(id);
                break;
            }
            default: {
                user.wrong += 1;
                await bot.sendMessage(id, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª... –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É - ${chats[id]}.`, againOptions);
                break;
            }
        }

        await user.save();
    })
};

start();
